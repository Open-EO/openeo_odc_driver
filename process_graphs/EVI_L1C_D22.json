{
  "parameters": [
    {
      "name": "collection-id",
      "description": "The ID of the collection to load.",
      "default": "COPERNICUS/S2",
      "schema": {
        "type": "string",
        "subtype": "collection-id",
        "pattern": "^[\\w\\-\\.~/]+$"
      }
    },
    {
      "name": "bands",
      "description": "The band names for the NIR, RED and BLUE bands in exactly this order.",
      "default": [
        "B08",
        "B04",
        "B02"
      ],
      "schema": {
        "type": "array",
        "items": {
          "type": "string",
          "subtype": "band-name"
        }
      }
    }
  ],
  "process_graph": {
    "dc": {
      "process_id": "load_collection",
      "description": "Loading the data; The order of the specified bands is important for the following reduce operation.",
      "arguments": {
        "id": "openEO_S2_32632_10m_L1C_D22_test",
      "spatial_extent": {
        "west":11.279182434082033,
        "south":46.464349400461145,
        "east":11.406898498535158,
        "north":46.522729291844286
      },
      "temporal_extent": [
        "2018-06-14",
        "2018-06-23"
      ],
        "bands": [
        "B08",
        "B04",
        "B02"
      ]
      }
    },
    "evi": {
      "process_id": "reduce_dimension",
      "arguments": {
        "data": {
          "from_node": "dc"
        },
        "reducer": {
          "process_graph": {
            "nir": {
              "process_id": "array_element",
              "arguments": {
                "data": {
                  "from_parameter": "data"
                },
                "index": 0
              }
            },
            "sub": {
              "process_id": "subtract",
              "arguments": {
                "x": {
                  "from_node": "nir"
                },
                "y": {
                  "from_node": "red"
                }
              }
            },
            "div": {
              "process_id": "divide",
              "arguments": {
                "x": {
                  "from_node": "sub"
                },
                "y": {
                  "from_node": "sum"
                }
              }
            },
            "p3": {
              "process_id": "multiply",
              "arguments": {
                "x": 2.5,
                "y": {
                  "from_node": "div"
                }
              },
              "result": true
            },
            "sum": {
              "process_id": "sum",
              "arguments": {
                "data": [
                  1,
                  {
                    "from_node": "p1"
                  },
                  {
                    "from_node": "p2"
                  },
                  {
                    "from_node": "nir"
                  }
                ]
              }
            },
            "red": {
              "process_id": "array_element",
              "arguments": {
                "data": {
                  "from_parameter": "data"
                },
                "index": 1
              }
            },
            "p1": {
              "process_id": "multiply",
              "arguments": {
                "x": 6,
                "y": {
                  "from_node": "red"
                }
              }
            },
            "blue": {
              "process_id": "array_element",
              "arguments": {
                "data": {
                  "from_parameter": "data"
                },
                "index": 2
              }
            },
            "p2": {
              "process_id": "multiply",
              "arguments": {
                "x": -7.5,
                "y": {
                  "from_node": "blue"
                }
              }
            }
          }
        },
        "dimension": "bands"
      }
    },
    "mintime": {
      "process_id": "reduce_dimension",
      "description": "Compute a minimum time composite by reducing the temporal dimension",
      "arguments": {
        "data": {
          "from_node": "evi"
        },
        "dimension": "temporal",
        "reducer": {
          "process_graph": {
            "min": {
              "process_id": "min",
              "arguments": {
                "data": {
                  "from_parameter": "data"
                }
              },
              "result": true
            }
          }
        }
      }
    },
    "save": {
      "process_id": "save_result",
      "arguments": {
        "data": {
          "from_node": "mintime"
        },
        "format": "GTiff"
      },
      "result": true
    }
  }
}